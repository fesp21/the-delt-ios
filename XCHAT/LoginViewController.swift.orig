//
//  LoginViewController.swift
//  XCHAT
//
//  Created by Mateo Garcia on 5/13/15.
//  Copyright (c) 2015 Mateo Garcia. All rights reserved.
//

/*
FOR LOGIN VIEW
- transform from login to signup on signup pressed
- add email textfield on top #SEXY

- fix logout.
*/


import UIKit
import Parse
import MessageUI

class LoginViewController: UIViewController, UITextFieldDelegate {
    
    @IBOutlet weak var loginView: UIView!
    @IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var nameTextFieldHeight: NSLayoutConstraint!
    @IBOutlet weak var nameTextFieldBottomSpacing: NSLayoutConstraint!
    @IBOutlet weak var emailTextField: UITextField!
    @IBOutlet weak var emailTextFieldHeight: NSLayoutConstraint!
    @IBOutlet weak var emailTextFieldBottomSpacing: NSLayoutConstraint!
    @IBOutlet weak var usernameTextField: UITextField!
    @IBOutlet weak var usernameTextFieldBottomSpacing: NSLayoutConstraint!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var passwordTextFieldHeight: NSLayoutConstraint!
    @IBOutlet weak var passwordTextFieldBottomSpacing: NSLayoutConstraint!
    @IBOutlet weak var loginButton: UIButton!
    @IBOutlet weak var signupButton: UIButton!
    
    var loginButtonOriginalColor: UIColor!
    var signupButtonOriginalColor: UIColor!
    
    var loginViewLoginHeight: CGFloat!
    
    var textFieldOriginalHeight: CGFloat!
    
    var textFields: [UITextField]!
    var signupTextFieldConstraints: [NSLayoutConstraint]!
    var loginTextFieldConstraints: [NSLayoutConstraint]!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.nameTextField.attributedPlaceholder = NSAttributedString(string: "Name", attributes: [NSForegroundColorAttributeName : UIColor.whiteColor()])
        self.nameTextField.keyboardAppearance = UIKeyboardAppearance.Dark
        self.nameTextField.delegate = self
        
        self.emailTextField.attributedPlaceholder = NSAttributedString(string: "Email", attributes: [NSForegroundColorAttributeName : UIColor.whiteColor()])
        self.emailTextField.keyboardAppearance = UIKeyboardAppearance.Dark
        self.emailTextField.delegate = self
        
        self.usernameTextField.attributedPlaceholder = NSAttributedString(string: "Username", attributes: [NSForegroundColorAttributeName : UIColor.whiteColor()])
        self.usernameTextField.keyboardAppearance = UIKeyboardAppearance.Dark
        usernameTextField.delegate = self
        
        self.passwordTextField.attributedPlaceholder = NSAttributedString(string: "Password", attributes: [NSForegroundColorAttributeName : UIColor.whiteColor()])
        self.passwordTextField.keyboardAppearance = UIKeyboardAppearance.Dark
        passwordTextField.delegate = self
        
        self.loginButtonOriginalColor = self.loginButton.titleColorForState(.Normal)
        self.signupButtonOriginalColor = self.signupButton.titleColorForState(.Normal)
        
        self.textFieldOriginalHeight = self.nameTextFieldHeight.constant
        
        self.textFields = [self.nameTextField, self.emailTextField, self.usernameTextField, self.passwordTextField]
        self.signupTextFieldConstraints = [self.nameTextFieldHeight, self.nameTextFieldBottomSpacing, self.emailTextFieldHeight, self.emailTextFieldBottomSpacing]
        self.loginTextFieldConstraints = [self.passwordTextFieldHeight, self.passwordTextFieldBottomSpacing]
        
        // Show login text fields on load.
        self.showSignup(false)
        
        // Must come after above line to ensure login view is proper height
        self.loginView.layer.cornerRadius = 2
        self.loginView.layer.masksToBounds = true
        self.loginView.setNeedsLayout()
        self.loginView.layoutIfNeeded()
        self.loginViewLoginHeight = self.loginView.frame.height
    }
    
    override func viewDidAppear(animated: Bool) {
        super.viewDidAppear(animated)
        
        usernameTextField.becomeFirstResponder()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
}


// MARK: - Helpers

extension LoginViewController {
    func showSignup(show: Bool) {
        self.view.endEditing(true)
        
        let animationDuration = 0.35
        
        if show {
            self.signupTextFieldConstraints.forEach({ $0.constant = self.textFieldOriginalHeight })
            self.loginTextFieldConstraints.forEach({ $0.constant = 0 })
            
        } else {
            self.signupTextFieldConstraints.forEach({ $0.constant = 0 })
            self.loginTextFieldConstraints.forEach({ $0.constant = self.textFieldOriginalHeight })
        }
        
        self.loginView.setNeedsLayout()
        self.textFields.forEach({ $0.setNeedsLayout() })
        UIView.animateWithDuration(animationDuration, animations: { () -> Void in
            self.loginView.layoutIfNeeded()
            self.textFields.forEach({ $0.layoutIfNeeded() })
            self.loginButton.setTitleColor(show ? UIColor.darkGrayColor() : self.loginButtonOriginalColor, forState: .Normal)
            self.signupButton.setTitleColor(show ? self.loginButtonOriginalColor : self.signupButtonOriginalColor, forState: .Normal)
            
            }, completion: nil)
        
        [self.nameTextField, self.emailTextField].forEach { (textField: UITextField) in
            UIView.transitionWithView(textField, duration: animationDuration - 1, options: .TransitionCrossDissolve, animations: {
                textField.hidden = !show
                }, completion: nil)
            }
        
        UIView.transitionWithView(self.passwordTextField, duration: animationDuration - 1, options: .TransitionCrossDissolve, animations: {
            self.passwordTextField.hidden = show
            }, completion: nil)
    }
    
    func transitionToApp() {
        let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
        
        UIView.transitionWithView(self.view.window!, duration: 0.5, options: UIViewAnimationOptions.TransitionCrossDissolve, animations: { () -> Void in
            self.view.window!.rootViewController = appDelegate.hamburgerViewController
            let reelStoryboard = UIStoryboard(name: "Reel", bundle: nil)
            let reelNavigationController = reelStoryboard.instantiateViewControllerWithIdentifier("ReelNavigationController") as! UINavigationController
            
            appDelegate.hamburgerViewController?.contentViewController = reelNavigationController
            appDelegate.menuViewController.tableView.reloadData()
            
            }, completion: nil)
    }
}


// MARK: Actions

extension LoginViewController {
    // Records login/signup information.
    @IBAction func signupPressed(sender: AnyObject) {
        self.view.endEditing(true)
        
        if self.loginView.frame.height == self.loginViewLoginHeight {
            self.showSignup(true)
            
        } else {
            self.presentSignupRequestMailCompose()
            
            /*
            let user = PFUser()
            user.email = emailTextField.text
            user.username = usernameTextField.text
            user.password = passwordTextField.text
            user["totalNumFavesReceived"] = 0
            user["totalNumPhotosPosted"] = 0
            
            // other fields can be set just like with PFObject
            // user["phone"] = "415-392-0202"
            
            user.signUpInBackgroundWithBlock { (succeeded: Bool, error: NSError?) -> Void in
                if let error = error {
                    let errorString = error.userInfo["error"] as? NSString
                    
                    // Show the errorString somewhere and let the user try again.
                    print("Signup error: \(errorString)")
                    
                    let invalidSignupAlertVC = UIAlertController(title: "Email or Username Taken", message: "Please try again.", preferredStyle: UIAlertControllerStyle.Alert)
                    invalidSignupAlertVC.addAction(UIAlertAction(title: "OK", style: .Default, handler: nil))
                    self.presentViewController(invalidSignupAlertVC, animated: true, completion: nil)
                    
                } else {
                    
                    // Hooray! Let them use the app now.
                    print("SIGNUP SUCCESSFUL")
                    
                    self.transitionToApp()
                }
            }
            */
        }
    }
    
    // Logs in with username (not email) and password.
    @IBAction func loginPressed(sender: AnyObject) {
        if self.loginView.frame.height == self.loginViewLoginHeight {
            
            // TODO: Check that text field text is not null.
            PFUser.logInWithUsernameInBackground(usernameTextField.text!, password: passwordTextField.text!) { (user: PFUser?, error: NSError?) -> Void in
                if user != nil {
                    
                    print("LOGIN SUCCESSFUL")
                    
                    self.emailTextField.resignFirstResponder()
                    self.usernameTextField.resignFirstResponder()
                    self.passwordTextField.resignFirstResponder()
                    
                    self.transitionToApp()
                    
                } else {
                    
                    print("LOGIN FAILED")
                    
                    let invalidLoginAlertVC = UIAlertController(title: "Invalid Username or Password", message: "Please try again.", preferredStyle: UIAlertControllerStyle.Alert)
                    invalidLoginAlertVC.addAction(UIAlertAction(title: "OK", style: .Default, handler: nil))
                    self.presentViewController(invalidLoginAlertVC, animated: true, completion: nil)
                }
            }
            
        } else {
            self.showSignup(false)
        }
    }
    
    @IBAction func onBackgroundTapped(sender: AnyObject) {
        self.view.endEditing(true)
        
        print("BACKGROUND TAPPED")
    }
}


// MARK: - Mail Compose View Controller Delegate

extension LoginViewController: MFMailComposeViewControllerDelegate {
    func mailComposeController(controller: MFMailComposeViewController, didFinishWithResult result: MFMailComposeResult, error: NSError?) {
        
        // TODO: Handle each mail case? i.e. sent, not sent, etc.
        
        controller.dismissViewControllerAnimated(true) {
            if result == MFMailComposeResultSent {
                let alert = UIAlertController(title: "Thanks for Signing Up!", message: "If your charge has already been added to The Delt, you'll be added immediately. If your charge is not yet using The Delt, we'll be in touch as soon as possible about signing your charge up for The Delt.", preferredStyle: .Alert)
                alert.addAction(UIAlertAction(title: "OK", style: .Default, handler: nil))
                self.presentViewController(alert, animated: true, completion: nil)
            }
        }
    }
    
<<<<<<< HEAD
    func presentSignupRequestMailCompose() {
        if MFMailComposeViewController.canSendMail() {
            let subject = "THE DELT: Signup Request"
            let recipient = "thedeltusa@gmail.com"
            var body = "Please sign me up for The Delt:"
            body += "\nName: "
            if let name = self.nameTextField.text {
                body += name
            }
            body += "\nEmail: "
            if let email = self.emailTextField.text {
                body += email
            }
            body += "\nUsername: "
            if let username = self.usernameTextField.text {
                body += username
            }
            body += "\nTheta Delta Chi Charge: "
            
            let mailComposeVC = MFMailComposeViewController()
            mailComposeVC.mailComposeDelegate = self
            mailComposeVC.setSubject(subject)
            mailComposeVC.setToRecipients([recipient])
            mailComposeVC.setMessageBody(body, isHTML: false)
=======
    // TODO: This transition causes the button icons to appear in the top left corner at first.
    func transitionToApp() {
        let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
        
        UIView.transitionWithView(self.view.window!, duration: 0.5, options: UIViewAnimationOptions.TransitionCrossDissolve, animations: { () -> Void in
            self.view.window!.rootViewController = appDelegate.hamburgerViewController
            let reelStoryboard = UIStoryboard(name: "Reel", bundle: nil)
            let reelNC = reelStoryboard.instantiateViewControllerWithIdentifier("ReelNavigationController") as! UINavigationController
            if let reelVC = reelNC.viewControllers[0] as? ReelViewController {
                reelVC.menuDelegate = appDelegate.menuViewController // Set menu delegate so menu button works for first view shown.
            }
            
            appDelegate.hamburgerViewController?.contentViewController = reelNC
            appDelegate.menuViewController.tableView.reloadData()
>>>>>>> master
            
            
            // mailComposeVC.navigationBar.titleTextAttributes = [NSForegroundColorAttributeName: UIColor.blackColor()]
            // UINavigationBar.appearance().barStyle = .Black
            
            self.presentViewController(mailComposeVC, animated: true, completion: nil)
            
        } else {
            let alert = UIAlertController(title: "Mail Not Enabled", message: "Could not send signup request. Please set up a mail account for your device and try again.", preferredStyle: UIAlertControllerStyle.Alert)
            alert.addAction(UIAlertAction(title: "OK", style: .Default, handler: nil))
            
            self.presentViewController(alert, animated: true, completion: nil)
        }
    }
}
